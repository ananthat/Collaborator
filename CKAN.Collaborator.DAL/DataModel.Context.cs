//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CKAN.Collaborator.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CKANDBEntities : DbContext
    {
        public CKANDBEntities()
            : base("name=CKANDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TblCollaborator> TblCollaborators { get; set; }
        public virtual DbSet<TblUser> TblUsers { get; set; }
        public virtual DbSet<TblActivity> TblActivities { get; set; }
        public virtual DbSet<TblActivityName> TblActivityNames { get; set; }
    
        public virtual ObjectResult<string> SpCreateCollaborator(Nullable<int> vaultID, string collabeMail, Nullable<int> userID, Nullable<int> collabID, string token, string iPAddress)
        {
            var vaultIDParameter = vaultID.HasValue ?
                new ObjectParameter("VaultID", vaultID) :
                new ObjectParameter("VaultID", typeof(int));
    
            var collabeMailParameter = collabeMail != null ?
                new ObjectParameter("CollabeMail", collabeMail) :
                new ObjectParameter("CollabeMail", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var collabIDParameter = collabID.HasValue ?
                new ObjectParameter("CollabID", collabID) :
                new ObjectParameter("CollabID", typeof(int));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpCreateCollaborator", vaultIDParameter, collabeMailParameter, userIDParameter, collabIDParameter, tokenParameter, iPAddressParameter);
        }
    
        public virtual ObjectResult<string> SpDeleteCollaborator(Nullable<int> iD, Nullable<int> userID, string iPAddress)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpDeleteCollaborator", iDParameter, userIDParameter, iPAddressParameter);
        }
    
        public virtual ObjectResult<string> FnImpSpCreateCollaborator(Nullable<int> vaultID, string collabeMail, Nullable<int> userID, Nullable<int> collabID, string token, string iPAddress)
        {
            var vaultIDParameter = vaultID.HasValue ?
                new ObjectParameter("VaultID", vaultID) :
                new ObjectParameter("VaultID", typeof(int));
    
            var collabeMailParameter = collabeMail != null ?
                new ObjectParameter("CollabeMail", collabeMail) :
                new ObjectParameter("CollabeMail", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var collabIDParameter = collabID.HasValue ?
                new ObjectParameter("CollabID", collabID) :
                new ObjectParameter("CollabID", typeof(int));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FnImpSpCreateCollaborator", vaultIDParameter, collabeMailParameter, userIDParameter, collabIDParameter, tokenParameter, iPAddressParameter);
        }
    
        public virtual ObjectResult<string> FnImpSpDeleteCollaborator(Nullable<int> iD, Nullable<int> userID, string iPAddress)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FnImpSpDeleteCollaborator", iDParameter, userIDParameter, iPAddressParameter);
        }
    
        public virtual int SpLogActivities(Nullable<int> activityNames_ID, string iPAddress, Nullable<int> createdBy, Nullable<int> collaborator_ID, Nullable<int> box_ID, Nullable<int> status_ID, string status_Name, string fileName, Nullable<int> fileSize, Nullable<int> ver)
        {
            var activityNames_IDParameter = activityNames_ID.HasValue ?
                new ObjectParameter("ActivityNames_ID", activityNames_ID) :
                new ObjectParameter("ActivityNames_ID", typeof(int));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var collaborator_IDParameter = collaborator_ID.HasValue ?
                new ObjectParameter("Collaborator_ID", collaborator_ID) :
                new ObjectParameter("Collaborator_ID", typeof(int));
    
            var box_IDParameter = box_ID.HasValue ?
                new ObjectParameter("Box_ID", box_ID) :
                new ObjectParameter("Box_ID", typeof(int));
    
            var status_IDParameter = status_ID.HasValue ?
                new ObjectParameter("Status_ID", status_ID) :
                new ObjectParameter("Status_ID", typeof(int));
    
            var status_NameParameter = status_Name != null ?
                new ObjectParameter("Status_Name", status_Name) :
                new ObjectParameter("Status_Name", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileSizeParameter = fileSize.HasValue ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(int));
    
            var verParameter = ver.HasValue ?
                new ObjectParameter("Ver", ver) :
                new ObjectParameter("Ver", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLogActivities", activityNames_IDParameter, iPAddressParameter, createdByParameter, collaborator_IDParameter, box_IDParameter, status_IDParameter, status_NameParameter, fileNameParameter, fileSizeParameter, verParameter);
        }
    
        public virtual ObjectResult<string> SpVerifyCollaborator(Nullable<int> vaultID, string collabeMail, string token)
        {
            var vaultIDParameter = vaultID.HasValue ?
                new ObjectParameter("VaultID", vaultID) :
                new ObjectParameter("VaultID", typeof(int));
    
            var collabeMailParameter = collabeMail != null ?
                new ObjectParameter("CollabeMail", collabeMail) :
                new ObjectParameter("CollabeMail", typeof(string));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpVerifyCollaborator", vaultIDParameter, collabeMailParameter, tokenParameter);
        }
    
        public virtual ObjectResult<string> FnImpSpVerifyCollaborator(Nullable<int> vaultID, string collabeMail, string token)
        {
            var vaultIDParameter = vaultID.HasValue ?
                new ObjectParameter("VaultID", vaultID) :
                new ObjectParameter("VaultID", typeof(int));
    
            var collabeMailParameter = collabeMail != null ?
                new ObjectParameter("CollabeMail", collabeMail) :
                new ObjectParameter("CollabeMail", typeof(string));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FnImpSpVerifyCollaborator", vaultIDParameter, collabeMailParameter, tokenParameter);
        }
    }
}
